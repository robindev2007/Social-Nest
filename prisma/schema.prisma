// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String
  fullName       String
  posts          Post[]
  avatar         String         @default("")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  likes          Like[]
  friends        Friend[]       @relation("UserFriends")
  friendRequests Friend[]       @relation("FriendRequests")
  notifications  Notification[]
}

model Post {
  id        String   @id @default(uuid())
  title     String?
  content   String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]
}

model Like {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Friend {
  id         String    @id @default(uuid())
  userId     String
  friendId   String
  status     String    @default("pending") // e.g., pending, accepted, blocked
  createdAt  DateTime  @default(now())
  acceptedAt DateTime?

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("FriendRequests", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  type      String // e.g., "friend_request", "like", "comment"
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
